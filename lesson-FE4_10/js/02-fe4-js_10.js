console.log(
    '%c 2.Синхронний і Асинхронний код. ',
    'color: white; background-color: #D33F49',
);

//! Синхронний код
console.warn("Синхронний код:");

//? ✴️ У синхронному коді така інструкція 
//? не може почати своє виконання, 
//? доки не виконається попередня. 
//? Тобто інструкції обробляються послідовно.
console.log("First Sync log");
console.log("Second Sync log");
console.log("Third Sync log");
console.log("----------------------------------");


//! Асинхронний код
console.warn("Асинхронний код:");
//? ✴️ Наступний код - асинхронний.
//? З функцією setTimeout() ми познайомимося далі.
//? Зараз про неї нам потрібно знати тільки те,
//? що вона приймає два параметри:
//? callback-функцію, яка буде викликана після закінчення часу,
//? який ми передаємо другим аргументом.
//! Спрацює Першим
console.log("First Async log");

setTimeout(() => {
    //! Спрацює останнім, через 2000 мілісекунд.
    console.log("Second Async log");
}, 2000);

//! Спрацює Другим
console.log("Third Async log");
console.log("----------------------------------");

//? ✳️ Функція setTimeout() відпрацьовує синхронно
//? і реєструє відкладений виклик переданої callback-функції,
//? яка буде викликана асинхронно, через вказаний проміжок часу.
