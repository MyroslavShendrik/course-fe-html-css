console.log(
    '%c 3.Об\'єктно - орієнтоване програмування. ',
    'color: white; background-color: #D33F49',
);

//! Процедурне програмування
console.warn(`Процедурне програмування: \n ${((window.location.href).split('/')).slice(0, -2).join('/') + '/'}${"lesson-FE3_16/images/procedural.png"}`);
//? ✴️ Процедурне програмування
//? - набір не пов'язаних явно функцій і змінних
//? для зберігання і обробки інформації.
//? Цей підхід - простий і прямолінійний,
//? і може використовуватись для задач,
//? в яких немає тісно пов'язаних сутностей (даних і функцій для їх обробки).
//? ✳️ Розглянемо приклад процедурного коду,
//? в якому є змінні і функція для підрахунку результату.
const baseSalary = 30000;
const overtime = 10;
const rate = 20;
console.log(`baseSalary_before: ${baseSalary}, overtime: ${overtime}, rate: ${rate},`);

const getWage = (baseSalary, overtime, rate) => {
    return baseSalary + overtime * rate;
};

console.log("baseSalary_after =", getWage(baseSalary, overtime, rate)); //! 30200
console.log("-------------------------------------------------------------");


//! Об'єктно-орієнтоване програмування (ООП)
console.warn(`Об'єктно-орієнтоване програмування (ООП): \n ${((window.location.href).split('/')).slice(0, -2).join('/') + '/'}${"lesson-FE3_16/images/oop.png"}`);
//? ✴️ Об'єктно-орієнтоване програмування (ООП)
//? - методологія, яка описує програму
//? як сукупність об'єктів,
//? кожен з яких містить дані (властивості)
//? і методи для взаємодії з ними.
//? ✳️ Розглянемо приклад,
//? в якому використовуємо ООП,
//? зібравши дані в об'єкт employee.
const employee = {
    baseSalary: 30000,
    overtime: 10,
    rate: 20,
    getWage() {
        return this.baseSalary + this.overtime * this.rate;
    },
};

console.log("baseSalary_OOP =", employee.getWage()); //! 30200
//? ✳️ За такого підходу у методі відсутні параметри, 
//? використовуються властивості об'єкта, 
//? які задаються на момент створення об'єкта 
//? і можуть так само змінюватися іншими методами. 
//? На виході отримуємо сутність з простим інтерфейсом, 
//? що зменшує складність програми.


//? ✳️  З ідеологічної точки зору, 
//? ООП - це підхід до програмування як до моделювання, 
//? що вирішує основне завдання - структурування інформації 
//? з точки зору керованості, 
//? що суттєво покращує контроль процесу моделювання.
console.log(
    `%c
    ООП - це підхід до програмування як до моделювання,
    що вирішує основне завдання
    - структурування інформації з точки зору керованості,
    що суттєво покращує контроль процесу моделювання.
    `,
    'color: blue; font-size: 18px',
);
console.log("-------------------------------------------------------------");


//! Сутності ООП
console.warn("Сутності ООП:");
//? ✴️

//! 1.Клас
console.warn("1.Клас:");
//? ✴️

//! 2.Екземпляр
console.warn("2.Екземпляр:");
//? ✴️

//! 3.Інтерфейс
console.warn("3.Інтерфейс:");
//? ✴️
console.log("-------------------------------------------------------------");






// console.log("total:", total); //! 32
console.log(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");

console.log("-------------------------------------------------------------");
