console.log(
    '%c 3.Об\'єктно - орієнтоване програмування. ',
    'color: white; background-color: #D33F49',
);

//! Процедурне програмування
console.warn(`Процедурне програмування: \n ${((window.location.href).split('/')).slice(0, -2).join('/') + '/'}${"lesson-FE3_16/images/procedural.png"}`);
//? ✴️ Процедурне програмування
//? - набір не пов'язаних явно функцій і змінних
//? для зберігання і обробки інформації.
//? Цей підхід - простий і прямолінійний,
//? і може використовуватись для задач,
//? в яких немає тісно пов'язаних сутностей (даних і функцій для їх обробки).
//? ✳️ Розглянемо приклад процедурного коду,
//? в якому є змінні і функція для підрахунку результату.
const baseSalary = 30000;
const overtime = 10;
const rate = 20;
console.log(`baseSalary_before: ${baseSalary}, overtime: ${overtime}, rate: ${rate},`);

const getWage = (baseSalary, overtime, rate) => {
    return baseSalary + overtime * rate;
};

console.log("baseSalary_after =", getWage(baseSalary, overtime, rate)); //! 30200
console.log("-------------------------------------------------------------");


//! Об'єктно-орієнтоване програмування (ООП)
console.warn(`Об'єктно-орієнтоване програмування (ООП): \n ${((window.location.href).split('/')).slice(0, -2).join('/') + '/'}${"lesson-FE3_16/images/oop.png"}`);
//? ✴️ Об'єктно-орієнтоване програмування (ООП)
//? - методологія, яка описує програму
//? як сукупність об'єктів,
//? кожен з яких містить дані (властивості)
//? і методи для взаємодії з ними.
//? ✳️ Розглянемо приклад,
//? в якому використовуємо ООП,
//? зібравши дані в об'єкт employee.
const employee = {
    baseSalary: 30000,
    overtime: 10,
    rate: 20,
    getWage() {
        return this.baseSalary + this.overtime * this.rate;
    },
};

console.log("baseSalary_OOP =", employee.getWage()); //! 30200
//? ✳️ За такого підходу у методі відсутні параметри, 
//? використовуються властивості об'єкта, 
//? які задаються на момент створення об'єкта 
//? і можуть так само змінюватися іншими методами. 
//? На виході отримуємо сутність з простим інтерфейсом, 
//? що зменшує складність програми.


//? ✳️  З ідеологічної точки зору, 
//? ООП - це підхід до програмування як до моделювання, 
//? що вирішує основне завдання - структурування інформації 
//? з точки зору керованості, 
//? що суттєво покращує контроль процесу моделювання.
console.log(
    `%c
    ООП - це підхід до програмування як до моделювання,
    що вирішує основне завдання
    - структурування інформації з точки зору керованості,
    що суттєво покращує контроль процесу моделювання.
    `,
    'color: blue; font-size: 18px',
);
console.log("-------------------------------------------------------------");


//! Сутності ООП
console.warn("Сутності ООП:");
//? ✴️ Уявіть собі, що ми проектуємо автомобіль.
//? У нього буде двигун, чотири колеса, бензобак тощо.
//? Автомобіль повинен мати можливість заводитися,
//? збільшувати і зменшувати швидкість.
//? Ми знаємо як взаємодіє двигун і колеса,
//? тобто за якими законами взаємодіють різні частини машини.


//! 1.Клас
console.warn("1.Клас:");
//? ✴️ Ми описуємо всі запчастини, з яких складається автомобіль,
//? тоді яким чином ці запчастини взаємодіють між собою
//? і що повинен зробити водій, щоб автомобіль
//? загальмував, увімкнулися фари тощо.
//? Результатом нашої роботи буде певний ескіз (шаблон, схема).
//? Ми тільки що розробили те, що в ООП називається класом.
//? ✳️ Клас - спосіб опису сутності, 
//? що визначає стан і поведінку, 
//? яка залежить від цього стану, 
//? а також правила для взаємодії з цією сутністю (контракт).
//? ✳️ У нашому випадку, клас визначає сутність - автомобіль.
//? Властивостями класу будуть двигун, колеса, фари тощо.
//? Методами класу будуть дії: відкрити двері, завести двигун, 
//? збільшити швидкість тощо.
class User {
    //todo: Тіло класу
};
console.log("User:", User); //! {}
console.log("-------------------------------------------------------------");


//! 2.Екземпляр
console.warn("2.Екземпляр:");
//? ✴️ Ми спроектували креслення і автомобілі,
//? розроблені на підставі них, сходять з конвеєру.
//? Кожен з них точно повторює креслення,
//? усі системи взаємодіють саме так, як ми спроектували,
//? але кожний автомобіль - унікальний.
//? Вони всі мають номер кузова і двигуна,
//? але всі номери різні, автомобілі розрізняються за кольором,
//? оздобленням салону.
//? Кожен з цих автомобілів - є екземпляом класу.
//? ✳️ Екземпляр (об'єкт) - це окремий представник класу,
//? який має конкретний стан і поведінку,
//? що повністю визначається класом.
//? Це те, що створено за кресленням,
//? тобто на підставі опису з класу.
//? ✳️ Простіше кажучи, 
//? об'єкт має конкретні значення властивостей і методи,
//?  що працюють з цими властивостями на основі правил, 
//? заданих в класі. 
//? У цьому прикладі, якщо клас - це якийсь абстрактний автомобіль на кресленні, 
//? то об'єкт - це конкретний автомобіль, що стоїть у нас під вікнами.
const mango = new User();
console.log("mango:", mango); //! {}

const poly = new User();
console.log("poly:", poly); //! {}
console.log("-------------------------------------------------------------");


//! 3.Інтерфейс
console.warn("3.Інтерфейс:");
//? ✳️ Коли ми підходимо до автомата з кавою
//? або сідаємо за кермо автомобіля,
//? існує певний набір елементів управління,
//? з якими ми можемо взаємодіяти.
//? ✴️ Інтерфейс
//? - це набір властивостей і методів класу,
//? доступних для використання у роботі з екземпляром.
//? ✳️ По суті, інтерфейс описує клас, 
//? чітко визначаючи усі можливі дії над ним. 
//? Хороший приклад інтерфейсу - панель приладів автомобіля, 
//? яка дозволяє викликати методи як-от збільшення швидкості, 
//? гальмування, повертання, перемикання передач, увімкнення фар тощо.
class Auto {
    //todo: Набір властивостей
    //todo: Набір методів для взаємодії з користувачем (інтерфейс)
};
console.log("Auto:", Auto); //! {}

const autoFirst = new Auto();
console.log("autoFirst:", autoFirst); //! {}
console.log("-------------------------------------------------------------");


