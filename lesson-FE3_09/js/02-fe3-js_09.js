console.log(
    '%c 2.Порядок виконання коду. \n   Стек викликів.          ',
    'color: white; background-color: #D33F49',
);

//! Порядок виконання коду
console.warn("Порядок виконання коду:");
//? Коли інтерпретатор зустрічає виклик функції (або методу),
//? він призупиняє виконання поточного коду
//? і починає виконувати код з тіла функції.
//? Після того як увесь код функції буде виконаний,
//? інтерпретатор виходить з тіла функції,
//? повертаючись у те місце, звідки прийшов,
//? і продовжує виконувати код, наступний після виклику функції.
//todo: Приклад-1
console.warn("Приклад-1:");
const multiply = function(x, y, z) {
    console.log(`Результат множення дорівнює ${x * y * z}`);
};

console.log("Лог ДО виклику функції multiply");
multiply(2, 3, 5); //! Результат множення дорівнює 30
console.log(multiply(2, 3, 5)); //! //! Результат множення дорівнює 30 та undefined
console.log("Лог ПІСЛЯ виклику функції multiply");

//todo-1: Послідовність логів в консолі:
//! 'Лог ДО виклику функції multiply'
//! 'Результат множення дорівнює 30'
//! 'Результат множення дорівнює 30'
//!  undefined
//! 'Лог ПІСЛЯ виклику функції multiply'
// console.log("----------------------------------------------------");
console.log(". . . . . . . . . . . . . . . . . . . . . . . .  . .");


//todo: Приклад-2
console.warn("Приклад-2:");
const fnA = function() {
    console.log('Почала виконуватися [fnA]');
    fnB();
    console.log('Продовжила виконуватися [fnA] після виходу з [fnB]');
};

const fnB = function() {
    console.log('Виконується [fnB]');
};

console.log('Почав виконання [main]');
fnA();
console.log('Продовжив виконуватися [main] після виходу з [fnA]');

//todo-2: Послідовність логів в консолі:
//! 'Почав виконання [main]'
//! 'Почала виконуватися [fnA]'
//! 'Виконується [fnB]'
//! 'Продовжила виконуватися [fnA] після виходу з [fnB]'
//! 'Продовжив виконуватися [main] після виходу з [fnA]'
console.log("----------------------------------------------------");


//! Стек викликів
console.warn("Стек викликів: \n https://ruslan379.github.io/course-fe-html-css/lesson-FE3_09/images/call-stack.png");
//? Стек викликів (call stack)
//? - це механізм для відстеження
//? поточного місцезнаходження інтерпретатора в коді,
//? який викликає декілька функцій.
//? Яка із функцій виконується на цей момент,
//? які функції викликаються всередині функції,
//? що виконується,
//? яка функція буде викликана наступною тощо.
const bar = function() {
    console.log("bar");
};

const baz = function() {
    console.log("baz");
};

const foo = function() {
    console.log("foo");
    bar();
    baz();
};

foo();
console.log("----------------------------------------------------");