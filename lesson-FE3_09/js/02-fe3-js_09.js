console.log(
    '%c 2.Порядок виконання коду ',
    'color: white; background-color: #D33F49',
);

//! 2.Порядок виконання коду
//? Коли інтерпретатор зустрічає виклик функції (або методу),
//? він призупиняє виконання поточного коду
//? і починає виконувати код з тіла функції.
//? Після того як увесь код функції буде виконаний,
//? інтерпретатор виходить з тіла функції,
//? повертаючись у те місце, звідки прийшов,
//? і продовжує виконувати код, наступний після виклику функції.
//todo: Приклад-1
console.warn("Приклад-1:");
function multiply(x, y, z) {
    console.log(`Результат множення дорівнює ${x * y * z}`);
};

console.log("Лог ДО виклику функції multiply");
multiply(2, 3, 5); //! Результат множення дорівнює 30
console.log(multiply(2, 3, 5)); //! undefined
console.log("Лог ПІСЛЯ виклику функції multiply");

//todo-1: Послідовність логів в консолі:
//! 'Лог ДО виклику функції multiply'
//! 'Результат множення дорівнює 30'
//! 'Лог ПІСЛЯ виклику функції multiply'
console.log("----------------------------------------------------");


//todo: Приклад-2
console.warn("Приклад-2:");
const fnA = function () {
    console.log('Почала виконуватися [fnA]');
    fnB();
    console.log('Продовжила виконуватися [fnA] після виходу з [fnB]');
};

const fnB = function () {
    console.log('Виконується [fnB]');
};

console.log('Почав виконання [main]');
fnA();
console.log('Продовжив виконуватися [main] після виходу з [fnA]');

//todo-2: Послідовність логів в консолі:
//! 'Почав виконання [main]'
//! 'Почала виконуватися [fnA]'
//! 'Виконується [fnB]'
//! 'Продовжила виконуватися [fnA] після виходу з [fnB]'
//! 'Продовжив виконуватися [main] після виходу з [fnA]'
console.log("----------------------------------------------------");