console.log(
    '%c 4.–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Intersection Observer ',
    'color: white; background-color: #D33F49',
);

//! –ü—Ä–∏–∫–ª–∞–¥-1. Lazy-loading –∑–æ–±—Ä–∞–∂–µ–Ω—å 
console.warn("–ü—Ä–∏–∫–ª–∞–¥-1. Lazy-loading –∑–æ–±—Ä–∞–∂–µ–Ω—å:");
//? üìå –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:
//?    üî∏ –í—Å—ñ <img> –º–∞—é—Ç—å –∞—Ç—Ä–∏–±—É—Ç data-src, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
//?    üî∏ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ src –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è-–∑–∞–≥–ª—É—à–∫–∞.
//?    üî∏ –ö–æ–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–ø–µ—Ä—à–µ –ø–æ—Ç—Ä–∞–ø–ª—è—î –≤ –∑–æ–Ω—É –≤–∏–¥–∏–º–æ—Å—Ç—ñ, —Å–ø—Ä–∞—Ü—å–æ–≤—É—î IntersectionObserver —ñ —Å–∫—Ä–∏–ø—Ç –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î src = data - src, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—á–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É.
//? ‚ú≥Ô∏è –¢–∞–∫–∏–π –ø—ñ–¥—Ö—ñ–¥ –µ–∫–æ–Ω–æ–º–∏—Ç—å —Ä–µ—Å—É—Ä—Å–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–∞–π—Ç—É.
//todo: –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è
// const images = document.querySelectorAll('img[data-src]');
const images = document.querySelectorAll('.image-observer');

const loadImage = (img) => {
    img.src = img.dataset.src;
};

const observer1 = new IntersectionObserver(
    entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                loadImage(entry.target);
                observer1.unobserve(entry.target);
                console.log(`–ï–ª–µ–º–µ–Ω—Ç ${entry.target.alt} –≤–∏–¥–Ω–æ!`);
            }
        });
    },
    {
        threshold: 0.9, //todo: –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ 90% –æ–±'—î–∫—Ç–∞ –≤–∏–¥–Ω–æ
    }
);

images.forEach(img => observer1.observe(img));
console.log("-----------------------------------------------------------------");


//todo: –¢–µ–∫—Å—Ç
const texts = document.querySelectorAll('.text-observer');

const observer11 = new IntersectionObserver(
    (entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                console.log("–¢–ï–ö–°–¢ –≤–∏–¥–Ω–æ!");
                entry.target.style.color = "red";
                // entry.target.style.background = "lightgreen";
            } else {
                console.log("–¢–ï–ö–°–¢ –ø—ñ—à–æ–≤ —ñ–∑ –∑–æ–Ω–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ...");
                entry.target.style.color = "lightgrey";
            }
        }
        );
    },
    {
        threshold: 0.6, //todo: –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ 60% –æ–±'—î–∫—Ç–∞ –≤–∏–¥–Ω–æ
    }
);

texts.forEach(text => observer11.observe(text));
console.log("-----------------------------------------------------------------");



//! –ü—Ä–∏–∫–ª–∞–¥-2.–ê–Ω—ñ–º–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∏ –ø–æ—è–≤—ñ 
console.warn("–ü—Ä–∏–∫–ª–∞–¥-2.–ê–Ω—ñ–º–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∏ –ø–æ—è–≤—ñ :");
const sections = document.querySelectorAll(".animate");

const observer2 = new IntersectionObserver(entries => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add("in-view");
        }
    });
}, { threshold: 0.2 });

sections.forEach(section => observer2.observe(section));
console.log("-----------------------------------------------------------------");