console.log(
    '%c 5.Стрілкові(cтрілочні) функції. \n   Неявне повернення.            \n   Псевдомасив arguments.        ',
    'color: white; background-color: #D33F49',
);

//! Стрілкові(cтрілочні) функції
console.warn("Стрілкові(cтрілочні) функції:");
//? Стрілочні функції мають скорочений, лаконічніший синтаксис,
//? що зменшує обсяг коду, особливо коли функція маленька
//? або якщо вона використовується як колбек.
//? Усі стрілки створюються як функціональний вираз (function expression),
//? і якщо функція - не анонімна, її необхідно присвоювати змінній.
//todo: Звичайне оголошення функції:
function classicAdd(a, b, c) {
    return a + b + c;
};
console.log("classicAdd(1, 2, 3);", classicAdd(1, 2, 3)); //! 6
console.log(". . .  . . . .  . . . . . . . . . . . . . . . . . . . .");

//? Якщо параметрів декілька,
//? то вони перераховуються через кому в круглих дужках,
//? так само, як в приладі з function classicAdd(a, b, c),
//? між знаками дорівнює = і стрілкою =>.
//todo: Оголошення функції стрілочною функцією (декілька параметрів):
const arrowAdd = (a, b, c) => {
    return a + b + c;
};
console.log("arrowAdd(10, 20, 30);", arrowAdd(10, 20, 30)); //! 60
console.log(". . .  . . . .  . . . . . . . . . . . . . . . . . . . .");

//? Якщо параметр один, його можна оголошувати без круглих дужок.
//todo: Оголошення функції стрілочною функцією (один параметр):
const add = a => {
    return a + 5;
};
console.log("add(10);", add(10)); //! 15
console.log(". . .  . . . .  . . . . . . . . . . . . . . . . . . . .");

//? Якщо параметри відсутні, то обов'язково повинні бути порожні круглі дужки..
//todo: Оголошення функції стрілочною функцією (параметри відсутні):
const greet = () => {
    return "Привіт!"
};

console.log("greet();", greet()); //! 15
console.log("-------------------------------------------------------");


//! Явне та неявне повернення
//? У стрілочної функції після символу =>
//? знаходиться її тіло.
//? Існує два варіанти: з фігурними дужками і без них.


//! Явне повернення
console.warn("Явне повернення:");
//? Якщо є фігурні дужки, і функція повинна повертати якесь значення, 
//? необхідно явно поставити return. 
//? Це називається явне повернення (explicit return). 
//? Такий синтаксис використовується у разі, 
//? якщо в тілі функції потрібно виконати ще якісь інструкції, 
//? крім повернення значення.
const arrowAdd2 = (a, b, c) => {
    console.log(a, b, c);
    return a + b + c;
};
console.log("arrowAdd2(100, 200, 300);", arrowAdd2(100, 200, 300)); //! 600
console.log("-------------------------------------------------------");


//! Неявне повернення
console.warn("Неявне повернення:");
//? Якщо фігурні дужки відсутні,
//? то повертається результат виразу,
//? який стоїть після =>.
//? Це називається неявне повернення (implicit return).
//?  У прикладі повернеться результат виразу додавання параметрів a, b і c.
const arrowAdd3 = (a, b, c) => a + b + c;
console.log("arrowAdd2(1000, 2000, 3000);", arrowAdd2(1000, 2000, 3000)); //! 6000
console.log("-------------------------------------------------------");


//! Псевдомасив arguments
console.warn("Псевдомасив arguments:");
//?

console.log("-------------------------------------------------------");