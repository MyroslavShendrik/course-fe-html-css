console.log(
    '%c 4.Делегування подій ',
    'color: white; background-color: #D33F49',
);

//! Делегування подій​
console.warn(`Делегування подій (до)​: \n ${((window.location.href).split('/')).slice(0, -2).join('/') + '/'}${"lesson-FE4_01/images/before-delegation.webp"}`);
//? ✴️ Спливання дозволяє реалізувати
//? один із найкорисніших прийомів - делегування подій (event delegation).
//? Він полягає у тому, що, якщо є група елементів,
//? події яких потрібно обробляти однаково,
//? то додається один обробник на їх загального предка,
//? замість того, щоб додавати обробник до кожного елемента.
//? Використовуючи властивість event.target,
//? можна отримати посилання на цільовий елемент,
//? зрозуміти, на якому саме дочірньому елементі відбулася подія, і обробити її.

//? ✳️ Розглянемо приклад-1 "Активний елемент" з попереднього розділу.
//? Але тепер уявімо, що кількість дочірніх елементів (кнопок) дорівнює 100.
//? Тоді з'явилася б необхідність додати слухача на кожен активний елемент.
//? Проблема у тому, що у нас є 100 слухачів подій.
//? Всі вони вказують на одну і ту саму функцію слухача, але слухачів 100.
//? Таке рішення значно збільшило б кількість коду та знизило його читабельність.

//? ✳️ Для вирішення цього завдання перемістимо
//? усіх слухачів на спільного предка - елемент <div id="buttons-box>
console.warn(`Делегування подій (після)​: \n ${((window.location.href).split('/')).slice(0, -2).join('/') + '/'}${"lesson-FE4_01/images/after-delegation.png"}`);

console.log("-----------------------------------------------------------");
