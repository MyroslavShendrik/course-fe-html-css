console.log(
    '%c 5.Встановлення пакетів.              \n   Використання пакетів.              \n   Видалення пакетів.                 \n   Встановлення певної версії пакета. \n   Керування версіями пакетів.        \n   Керування кешем.                   ',
    'color: white; background-color: #D33F49',
);

//! Встановлення пакетів.
console.warn("Встановлення пакетів:");
//? ✴️ Одна з можливостей, які надає npm - встановлення пакетів,
//? які витягуються з реєстру і розпаковуються
//? в папку node_modules в корені проекту.
//? Після створення файлу package.json,
//? можна додати залежності в проект.
//? ✳️ Залежністю називають npm-пакет, 
//? який використовується у розробці. 
//? Це різноманітні утиліти і бібліотеки. 
//? Встановимо бібліотеку lodash.js:
console.log(
    `%c
    npm install lodash
        або
    npm i lodash
    `,
    'color: blue; font-size: 18px',
);
//? ✳️ NPM завантажив lodash і помістив його в node_modules
//? - папку, в якій будуть знаходитися всі зовнішні залежності.
//? ❗️❗️❗️ Не додавайте папку node_modules
//? в систему контролю версій,
//? у всіх розробників вона буде своя.
//? Якщо ви використовуєте Git, не забувайте
//? додати папку node_modules у файл .gitignore.
console.log("-------------------------------------------------------------------");

//! package.json
console.warn("package.json:");
//? ✴️ Створений файл package-lock.json
//? - це журнал знімків дерева залежностей проекту.
//? Він гарантує, що команда розробників використовує
//? однакові версії залежностей.
//? NPM автоматично оновлює його під час додавання,
//? видалення та оновлення пакетів.
//? ✳️ В package.json з'явилася нова залежність в полі dependencies.
//? Це означає, що validator версії 11.1.0 був встановлений як залежність
//? і готовий до роботи. Пакети постійно оновлюються,
//? ваша версія може відрізнятися.
console.log(
    `%c
    "dependencies": {
    "lodash": "^4.17.21"
    }
    `,
    'color: blue; font-size: 18px',
);
console.log("-------------------------------------------------------------------");


//! Використання пакетів
console.warn("Використання пакетів:");
//? ✴️ Щоб отримати інтерфейс пакета в Node.js-коді,
//? необхідно викликати функцію require("ім'я-модуля"),
//? передаючи аргументом їй ім'я модуля без визначення шляху
//? - це називається абсолютний імпорт.
//? Шлях не потрібен, оскільки за замовчуванням пошук модуля
//? буде відбуватися в папці node_modules.
//? Результатом свого виконання функція поверне інтерфейс модуля
//? - об'єкт з методами або просто функцію - залежить від пакета.
console.log(
    `%c
    const lodash = require('lodash');
    const sum = lodash.add(10, 5);
    `,
    'color: blue; font-size: 18px',
);
console.log("-------------------------------------------------------------------");


//! Видалення пакетів
console.warn("Видалення пакетів:");
//? ✴️ Припустимо, що версія lodash,
//? встановлена в попередньому прикладі,
//? викликає проблеми з сумісністю.
//? Ми можемо видалити цей пакет і поставити  версію.
console.log(
    `%c
    npm uninstall lodash
    `,
    'color: blue; font-size: 18px',
);
console.log("-------------------------------------------------------------------");
